I"-
<p><a href="/marine%20data%20analysis/pandas_1/">이전 포스트</a>에서는 DataFrame</p>

<!-- 
# Pandas Series

DataFrame에서 각각의 열 또는 행을 Series라고 한다.
DataFrame에서 Series를 뽑아내는 방법은 3가지가 있다.

일단 0번 데이터의 출신지를 뽑아보자.\
Indexing에는 3가지 방법이 있다.

## 1. Column based indexing
~~~python
>>> print(df['출신'])
0    제주
1    서울
2    경기
Name: 출신, dtype: object

>>> print(df['출신'][0])
제주
~~~
Column based indexing은 관심이 있는 column을 먼저 출력한 후 관심있는 row를 출력한다.\
`df['출신']`은 데이터프레임의 **출신** column만을 `Series`형태로 먼저 뽑으며,\
`df['출신'][0]`은 `df['출신']`라는 `Series` 중에서도 0번 데이터를 출력한다.

참고로, `df['출신']`와 같이 한 줄로만 되어있는 자료 형식을 `Series`라고 한다.

## 2. Location based indexing
~~~python
>>> print(df.loc[0])
이름    김A
성별     남
출신    제주
Name: 0, dtype: object

>>> print(df.loc[0, '출신'])
제주
~~~
Location based indexing은 (DataFrame).loc으로 사용 가능하다.\
Column based indexing과는 다르게 row의 index부터 찾고, column을 찾는 방식이다.\
찾고자 하는 데이터는 0번 row에 **출신**이라는 column이므로 `df.loc[0,'출신']`을 출력하면 된다.

## 3. Integer-location based indexing
~~~python
>>> print(df.iloc[0])
이름    김A
성별     남
출신    제주
Name: 0, dtype: object

>>> print(df.iloc[0, 2])
제주
~~~
Integer-location based indexing은 (DataFrame).iloc으로 사용 가능하며, Location based indexing과 비슷하다.\
차이점이라면 Location based indexing은 index를 행과 열의 이름을 사용하며, Integer-location based indexing은 index를 몇번째 위치에 있는 행과 열인지를 사용한다.\
위의 예시를 보면 0번 데이터는 0번째 row에 위치하며, **출신**이라는 column이 2번째 위치하므로, `df.iloc[0, 2]`라고 적은 것을 알 수 있다.

위의 예시들은 전부 한 가지 column에 한 가지 row만을 출력했지만, 다수의 column과 다수의 row를 사용하는 것도 가능하다. 

그에 대한 예시로 0번과 2번 데이터의 이름과 성별만을 출력해보겠다.
~~~
>>> print(df.loc[[0,2]])
   이름 성별  출신
0  김A  남  제주
2  이C  남  경기
>>> print(df.loc[[0,2],['이름','성별']])
   이름 성별
0  김A  남
2  이C  남
~~~

~~~
print(df.iloc[[0,2]])
   이름 성별  출신
0  김A  남  제주
2  이C  남  경기
~~~ -->
:ET